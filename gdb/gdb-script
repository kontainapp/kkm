
define show_pa_to_kva
	if $argc != 1
		help show_pa_to_kva
	else
		set $kva = 0xffff888000000000 + $arg0
		printf "0x%llx\n", $kva
	end
end

document show_pa_to_kva
	"Usage show_pa_to_kva physical-address"
end

define show_kva_to_pa
	if $argc != 1
		help show_kva_to_pa
	else
		set $START_KVA = 0xffff888000000000ULL
		set $END_KVA = 0xffffc88000000000ULL
		if $arg0 >= $START_KVA && $arg0 < $END_KVA
			set $pa = $arg0 - $START_KVA
			printf "0x%llx\n", $pa
		else
			printf "address not in range\n"
		end
	end
end

document show_kva_to_pa
	"Usage show_kva_to_pa kernel-direct-map-address"
end

define show_entry
	if $argc != 1
		help show_entry
	else
		set $PRESENT = 0x1ULL
		set $READ_WRITE = 0x2ULL
		set $USER_SUPER = 0x4ULL
		set $WRITE_THROUGH = 0x8ULL
		set $PAGE_CACHE_DISABLE = 0x10ULL
		set $ACCESSED = 0x20ULL
		set $DIRTY = 0x40ULL
		set $PAGE_SIZE = 0x80ULL
		set $EXEC_DISABLE = 0x8000000000000000ULL

		set $entry = $arg0

		printf " %16llx %3llx ", $entry & 0x7FFFFFFFFFFFF000ULL, $entry & 0xFFF
		if $entry & $EXEC_DISABLE
			printf "EX_DIS-"
		else
			printf "EX_ENA-"
		end
		if $entry & $PAGE_SIZE
			printf "BIGPG-"
		else
			printf "PDPTR-"
		end
		if $entry & $DIRTY
			printf "DIRTY-"
		else
			printf "CLEAN-"
		end
		if $entry & $ACCESSED
			printf "ACC-"
		else
			printf "NOT-"
		end
		if $entry & $PAGE_CACHE_DISABLE
			printf "PC_DIS-"
		else
			printf "PC_ENA-"
		end
		if $entry & $WRITE_THROUGH
			printf "WR_TH-"
		else
			printf "WR_BA-"
		end
		if $entry & $USER_SUPER
			printf "USER-"
		else
			printf "SUPR-"
		end
		if $entry & $READ_WRITE
			printf "WR-"
		else
			printf "RD-"
		end
		if $entry & $PRESENT
			printf "PRESENT"
		else
			printf "ABSCENT"
		end
		printf "\n"
	end
end

document show_entry
	"Usage show_entry entry"
end

define show_pgd
	if $argc == 0
		help show_pgd
	else
		set $pgd_max_entries = 512
		set $pgd_entry_address = (unsigned long long *)$arg0
		set $pgd_index = 0
		set $pgd_entry_va_offset = 0ULL
		set $PRESENT = 0x1ULL
		set $READ_WRITE = 0x2ULL
		set $USER_SUPER = 0x4ULL
		set $WRITE_THROUGH = 0x8ULL
		set $PAGE_CACHE_DISABLE = 0x10ULL
		set $ACCESSED = 0x20ULL
		set $PAGE_SIZE = 0x80ULL
		set $EXEC_DISABLE = 0x8000000000000000ULL
		while $pgd_index < $pgd_max_entries
			if $pgd_index < 256
				set $pgd_entry_va_base = 0x0ULL
			else
				set $pgd_entry_va_base = 0xffff000000000000ULL
			end
			set $pgd_entry_va = $pgd_entry_va_base + $pgd_entry_va_offset
			set $entry = *$pgd_entry_address

			if $entry != 0
				printf "%4d %16llx", $pgd_index, $pgd_entry_va
				show_entry $entry
			end
			set $pgd_index = $pgd_index + 1
			set $pgd_entry_address = $pgd_entry_address + 1
			set $pgd_entry_va_offset = $pgd_entry_va_offset + 0x8000000000ULL
		end
	end
end

document show_pgd
	"Usage show_pgd pgd-va"
end

define show_all_pgd
	if $argc == 0
		help show_all_pgd
	else
		set $kkm = (struct kkm *)$arg0
		printf "PGD of monitor\n"
		show_pgd $kkm->mm.pgd
		printf "PGD of guest kernel\n"
		show_pgd $kkm->guest_kernel
		printf "PGD of guest payload\n"
		show_pgd $kkm->guest_payload
	end
end

document show_all_pgd
	"Usage show_all_pgd kkm-va"
end

define show_pgd_va
	if $argc != 2
		help show_idt
	else
		set $kern_base_va = 0xFFFF888000000000ULL
		set $entry_size = 8ULL
		set $va = $arg1
		set $offset = $va & 0xFFF
		set $va = $va >> 12
		set $pte_index = $va & 0x1FF
		set $va = $va >> 9
		set $pmd_index = $va & 0x1FF
		set $va = $va >> 9
		set $pud_index = $va & 0x1FF
		set $va = $va >> 9
		set $pgd_index = $va & 0x1FF
		printf "va : %16lx\n", $arg1
		printf "pgd index : %3x\n", $pgd_index
		printf "pud index : %3x\n", $pud_index
		printf "pmd index : %3x\n", $pmd_index
		printf "pte index : %3x\n", $pte_index
		printf "pg offset : %3x\n\n", $offset

		set $entry_va = (unsigned long long)$arg0 + $pgd_index * $entry_size
		set $entry_value = *((unsigned long long *)$entry_va)
		printf "pgd table va %16lx pgd index %3x entry va %16lx entry value %16lx\n", $arg0, $pgd_index, $entry_va, $entry_value
		show_entry $entry_value

		set $table_pa = (unsigned long long)($entry_value & 0x7FFFFFFFFFFFF000ULL)
		set $table_va = $kern_base_va + $table_pa
		set $entry_va = $table_va + $pud_index * $entry_size
		set $entry_value = *((unsigned long long *)$entry_va)
		printf "\ntable pa %16lx table va %16lx entry index %3x entry va %16lx entry value %16lx\n", $table_pa, $table_va, $pud_index, $entry_va, $entry_value
		show_entry $entry_value

		set $table_pa = $entry_value & 0x7FFFFFFFFFFFF000ULL
		set $table_va = $kern_base_va + $table_pa
		set $entry_va = $table_va + $pmd_index * $entry_size
		set $entry_value = *((unsigned long long *)$entry_va)
		printf "\ntable pa %16lx table va %16lx entry index %3x entry va %16lx entry value %16lx\n", $table_pa, $table_va, $pmd_index, $entry_va, $entry_value
		show_entry $entry_value

		set $table_pa = $entry_value & 0x7FFFFFFFFFFFF000ULL
		set $table_va = $kern_base_va + $table_pa
		set $entry_va = $table_va + $pte_index * $entry_size
		set $entry_value = *((unsigned long long *)$entry_va)
		printf "\ntable pa %16lx table va %16lx entry index %3x entry va %16lx entry value %16lx\n", $table_pa, $table_va, $pte_index, $entry_va, $entry_value
		show_entry $entry_value

	end
end

document show_pgd_va
	"Usage show_pgd_va idt-va va"
end

define show_gdt
	if $argc == 0
		help show_gdt
	else
		set $gdt_entry_count = 32
		set $gdt_index = 0
		set $gdt_entry_address = (unsigned long long *)$arg0
		while $gdt_index < $gdt_entry_count
			set $gdt_entry = *$gdt_entry_address
			printf "seg %4lx ", $gdt_index * 8

			set $segment_base = (($gdt_entry & 0xff00000000000000ULL) >> 32) | (($gdt_entry & 0xff00000000ULL) >> 16) | (($gdt_entry & 0xffff0000ULL) >> 16)
			printf "base %8lx ", $segment_base

			set $segment_size = (($gdt_entry & 0xF000000000000ULL) >> 32) |  ($gdt_entry & 0xffff)
			printf "size %6lx ", $segment_size

			if $gdt_entry & 0x80000000000ULL
				printf "C"
			else
				printf "D"
			end
			if $gdt_entry & 0x40000000000ULL
				printf "D"
			else
				printf "U"
			end
			if $gdt_entry & 0x20000000000ULL
				printf "W"
			else
				printf "R"
			end
			if $gdt_entry & 0x10000000000ULL
				printf "A"
			else
				printf "-"
			end
			printf " "

			if $gdt_entry & 0x100000000000ULL
				printf "CD/DAT "
			else
				printf "SYSTEM "
			end
			printf "priv lvl %x ", ($gdt_entry & 0x600000000000ULL) >> 45
			if $gdt_entry & 0x800000000000ULL
				printf "PRESENT "
			else
				printf "------- "
			end

			if $gdt_entry & 0x80000000000000ULL
				printf "4k "
			else
				printf "1b "
			end
			if $gdt_entry & 0x40000000000000ULL
				printf "16b "
			else
				printf "32b "
			end
			if $gdt_entry & 0x20000000000000ULL
				printf "64b "
			else
				printf "32b "
			end
			printf "sys bit %d", ($gdt_entry & 0x10000000000000ULL) >> 52
			printf "\n"
			set $gdt_entry_address = $gdt_entry_address + 1
			set $gdt_index = $gdt_index + 1
		end
	end
end

document show_gdt
	"Usage show_gdt gdt-va"
end

define show_idt
	if $argc == 0
		help show_idt
	else
		set $idt_count = 256
		set $idt_index = 0
		set $idte_address = (unsigned long long *)$arg0
		while $idt_index < $idt_count
			set $entry0 = *($idte_address + 0)
			set $entry1 = *($idte_address + 1)
			if $entry0 & 0x800000000000ULL
				printf "P "
				printf "%4x seg %4x ", $idt_index, ($entry0 >> 16) & 0xffff
				printf "addr %16lx ", (($entry1 & 0xffffffff) << 32) | (($entry0 >> 32) & 0xffff0000ULL) | ($entry0 & 0xffffULL)
				printf "DPL %1x ", ($entry0 >> 45) & 3
				printf "TYPE %1x ", ($entry0 >> 40) & 0xf
				printf "IST %1x", ($entry0 >> 32) & 0x7
				printf "\n"
			end
			set $idt_index = $idt_index + 1
			set $idte_address = $idte_address + 2
		end
	end
end

document show_idt
	"Usage show_idt idt-va"
end
